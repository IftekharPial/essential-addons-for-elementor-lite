/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/advancedDataTable.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/advancedDataTable.js":
/*!**********************************!*\
  !*** ./src/advancedDataTable.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar advancedDataTable = /*#__PURE__*/function () {\n  function advancedDataTable() {\n    _classCallCheck(this, advancedDataTable);\n\n    // class props\n    this.timeout = null;\n    this.activeCell = null;\n    this.dragStartX = null;\n    this.dragStartWidth = null;\n    this.dragEl = null;\n    this.dragging = false;\n    this.inlineEditInitiated = false;\n    this.panelActionInitiated = false;\n    this.editor == tinymce.init({\n      selector: \".inline-edit\",\n      menubar: false,\n      inline: true,\n      plugins: [\"lists\", \"link\", \"autolink\"],\n      toolbar: \"bold italic underline strikethrough link | alignleft aligncenter alignright | numlist bullist\",\n      forced_root_block: false\n    }); // hooks\n\n    elementorFrontend.hooks.addAction(\"frontend/element_ready/eael-advanced-data-table.default\", this.initFrontend.bind(this));\n\n    if (ea.isEditMode) {\n      ea.hooks.addAction(\"ea.advDataTable.updateModel\", \"ea\", this.updateModel.bind(this));\n      ea.hooks.addAction(\"ea.advDataTable.updateView\", \"ea\", this.updateView.bind(this));\n      ea.hooks.addAction(\"ea.advDataTable.initInlineEdit\", \"ea\", this.initInlineEdit.bind(this));\n      ea.hooks.addAction(\"ea.advDataTable.initPanelAction\", \"ea\", this.initPanelAction.bind(this));\n      elementor.hooks.addFilter(\"elements/widget/contextMenuGroups\", this.initContextMenu.bind(this));\n      elementor.hooks.addAction(\"panel/open_editor/widget/eael-advanced-data-table\", this.initPanel.bind(this));\n    }\n  }\n\n  _createClass(advancedDataTable, [{\n    key: \"updateModel\",\n    value: function updateModel(model, container, refresh, value) {\n      // disable elementor remote server render\n      model.remoteRender = refresh;\n\n      if (elementor.config.version > \"2.7.6\") {\n        var settings = container.settings.attributes;\n        Object.keys(value).forEach(function (key) {\n          settings[key] = value[key];\n        });\n        parent.window.$e.run(\"document/elements/settings\", {\n          container: container,\n          settings: settings,\n          options: {\n            external: refresh\n          }\n        });\n      } else {\n        // update backbone model\n        Object.keys(value).forEach(function (key) {\n          model.setSetting(key, value[key]);\n        });\n      } // enable elementor remote server render just after elementor throttle\n      // ignore multiple assign\n\n\n      this.timeout = setTimeout(function () {\n        model.remoteRender = true;\n      }, 1001);\n    }\n  }, {\n    key: \"updateView\",\n    value: function updateView(view, refresh, value) {\n      var model = view.model; // disable elementor remote server render\n\n      model.remoteRender = refresh;\n\n      if (elementor.config.version > \"2.7.6\") {\n        var container = view.getContainer();\n        var settings = view.getContainer().settings.attributes;\n        Object.keys(value).forEach(function (key) {\n          settings[key] = value[key];\n        });\n        parent.window.$e.run(\"document/elements/settings\", {\n          container: container,\n          settings: settings,\n          options: {\n            external: refresh\n          }\n        });\n      } else {\n        // update backbone model\n        Object.keys(value).forEach(function (key) {\n          model.setSetting(key, value[key]);\n        });\n      } // enable elementor remote server render just after elementor throttle\n      // ignore multiple assign\n\n\n      this.timeout = setTimeout(function () {\n        model.remoteRender = true;\n      }, 1001);\n    }\n  }, {\n    key: \"initInlineEdit\",\n    value: function initInlineEdit(model, view) {\n      var _this = this;\n\n      if (this.inlineEditInitiated) {\n        return;\n      }\n\n      var interval = setInterval(function () {\n        if (view.el.querySelector(\".ea-advanced-data-table\")) {\n          _this.inlineEditInitiated = true;\n          var table = view.el.querySelector(\".ea-advanced-data-table-\".concat(model.attributes.id)); // init tinymce\n\n          if (table.classList.contains(\"ea-advanced-data-table-editable\")) {\n            editor.execCommand(\"mceRepaint\");\n          } // mousedown\n\n\n          table.addEventListener(\"mousedown\", function (e) {\n            e.stopPropagation();\n            console.log(\"mos\");\n\n            if (e.target.tagName.toLowerCase() === \"th\") {\n              _this.dragging = true;\n              _this.dragEl = e.target;\n              _this.dragStartX = e.pageX;\n              _this.dragStartWidth = e.target.offsetWidth;\n            }\n\n            if (e.target.tagName.toLowerCase() === \"th\" || e.target.tagName.toLowerCase() === \"td\") {\n              _this.activeCell = e.target;\n            } else if (e.target.parentNode.tagName.toLowerCase() === \"th\" || e.target.parentNode.tagName.toLowerCase() === \"td\") {\n              _this.activeCell = e.target.parentNode;\n            } else if (e.target.parentNode.parentNode.tagName.toLowerCase() === \"th\" || e.target.parentNode.parentNode.tagName.toLowerCase() === \"td\") {\n              _this.activeCell = e.target.parentNode.parentNode;\n            }\n          }); // mousemove\n\n          table.addEventListener(\"mousemove\", function (e) {\n            if (_this.dragging) {\n              _this.dragEl.style.width = \"\".concat(_this.dragStartWidth + (event.pageX - _this.dragStartX), \"px\");\n            }\n          }); // mouseup\n\n          table.addEventListener(\"mouseup\", function (e) {\n            if (_this.dragging) {\n              _this.dragging = false;\n              clearTimeout(_this.timeout);\n\n              if (table.classList.contains(\"ea-advanced-data-table-static\")) {\n                // clone current table\n                var origTable = table.cloneNode(true); // remove editable area\n\n                origTable.querySelectorAll(\"th, td\").forEach(function (el) {\n                  el.removeAttribute(\"id\");\n                  el.removeAttribute(\"class\");\n                  el.removeAttribute(\"contenteditable\");\n                  el.removeAttribute(\"spellcheck\");\n                }); // update table\n\n                ea.hooks.doAction(\"ea.advDataTable.updateView\", view, false, {\n                  ea_adv_data_table_static_html: origTable.innerHTML\n                });\n              } else {\n                // th width store\n                var widths = []; // collect width of th\n\n                table.querySelectorAll(\"th\").forEach(function (el, index) {\n                  widths[index] = el.style.width;\n                }); // update table\n\n                ea.hooks.doAction(\"ea.advDataTable.updateView\", view, false, {\n                  ea_adv_data_table_dynamic_th_width: widths\n                });\n              }\n            }\n          }); // input\n\n          table.addEventListener(\"input\", function (e) {\n            if (table.classList.contains(\"ea-advanced-data-table-static\")) {\n              clearTimeout(_this.timeout); // clone current table\n\n              var origTable = table.cloneNode(true); // remove editable area\n\n              origTable.querySelectorAll(\"th, td\").forEach(function (el) {\n                el.removeAttribute(\"id\");\n                el.removeAttribute(\"class\");\n                el.removeAttribute(\"contenteditable\");\n                el.removeAttribute(\"spellcheck\");\n              }); // update table\n\n              ea.hooks.doAction(\"ea.advDataTable.updateView\", view, false, {\n                ea_adv_data_table_static_html: origTable.innerHTML\n              });\n            }\n          }); // clear style\n\n          table.addEventListener(\"dblclick\", function (e) {\n            if (e.target.tagName.toLowerCase() === \"th\") {\n              e.stopPropagation();\n              clearTimeout(_this.timeout);\n\n              if (table.classList.contains(\"ea-advanced-data-table-static\")) {\n                // clone current table\n                var origTable = table.cloneNode(true); // remove editable area\n\n                origTable.querySelectorAll(\"th, td\").forEach(function (el) {\n                  el.removeAttribute(\"id\");\n                  el.removeAttribute(\"class\");\n                  el.removeAttribute(\"contenteditable\");\n                  el.removeAttribute(\"spellcheck\");\n                }); // update table\n\n                ea.hooks.doAction(\"ea.advDataTable.updateView\", view, false, {\n                  ea_adv_data_table_static_html: origTable.innerHTML\n                });\n              } else {\n                // th width store\n                var widths = []; // collect width of th\n\n                table.querySelectorAll(\"th\").forEach(function (el, index) {\n                  widths[index] = el.style.width;\n                }); // update table\n\n                ea.hooks.doAction(\"ea.advDataTable.updateView\", view, false, {\n                  ea_adv_data_table_dynamic_th_width: widths\n                });\n              }\n            }\n          });\n        }\n\n        clearInterval(interval);\n      }, 100);\n    }\n  }, {\n    key: \"initPanelAction\",\n    value: function initPanelAction(panel, model, view) {\n      var _this2 = this;\n\n      if (this.panelActionInitiated) {\n        return;\n      }\n\n      panel.el.addEventListener(\"click\", function (e) {\n        _this2.panelActionInitiated = true;\n\n        if (event.target.dataset.event == \"ea:advTable:export\") {\n          // export\n          var table = view.el.querySelector(\".ea-advanced-data-table-\".concat(model.attributes.id));\n          var rows = table.querySelectorAll(\"table tr\");\n          var csv = []; // generate csv\n\n          for (var i = 0; i < rows.length; i++) {\n            var row = [];\n\n            var _cols = rows[i].querySelectorAll(\"th, td\");\n\n            if (table.classList.contains(\"ea-advanced-data-table-static\")) {\n              for (var j = 0; j < _cols.length; j++) {\n                row.push(JSON.stringify(_cols[j].innerHTML.trim()));\n              }\n            } else {\n              for (var _j = 0; _j < _cols.length; _j++) {\n                row.push(JSON.stringify(_cols[_j].innerHTML.replace(/(\\r\\n|\\n|\\r)/gm, \" \").trim()));\n              }\n            }\n\n            csv.push(row.join(\",\"));\n          } // download\n\n\n          var csv_file = new Blob([csv.join(\"\\n\")], {\n            type: \"text/csv\"\n          });\n          var download_link = parent.document.createElement(\"a\");\n          download_link.classList.add(\"ea-adv-data-table-download-\".concat(model.attributes.id));\n          download_link.download = \"ea-adv-data-table-\".concat(model.attributes.id, \".csv\");\n          download_link.href = window.URL.createObjectURL(csv_file);\n          download_link.style.display = \"none\";\n          parent.document.body.appendChild(download_link);\n          download_link.click();\n          parent.document.querySelector(\".ea-adv-data-table-download-\".concat(model.attributes.id)).remove();\n        } else if (event.target.dataset.event == \"ea:advTable:import\") {\n          // import\n          var textarea = panel.el.querySelector(\".ea_adv_table_csv_string\");\n          var enableHeader = panel.el.querySelector(\".ea_adv_table_csv_string_table\").checked;\n          var csletr = textarea.value.split(\"\\n\");\n          var header = \"\";\n          var body = \"\";\n\n          if (textarea.value.length > 0) {\n            body += \"<tbody>\";\n            csletr.forEach(function (row, index) {\n              if (row.length > 0) {\n                cols = row.match(/(\"(?:[^\"\\\\]|\\\\.)*\"|[^\",\"]+)/gm);\n\n                if (cols.length > 0) {\n                  if (enableHeader && index == 0) {\n                    header += \"<thead><tr>\";\n                    cols.forEach(function (col) {\n                      if (col.match(/(^\"\")|(^\")|(\"$)|(\"\"$)/g)) {\n                        header += \"<th>\".concat(JSON.parse(col), \"</th>\");\n                      } else {\n                        header += \"<th>\".concat(col, \"</th>\");\n                      }\n                    });\n                    header += \"</tr></thead>\";\n                  } else {\n                    body += \"<tr>\";\n                    cols.forEach(function (col) {\n                      if (col.match(/(^\"\")|(^\")|(\"$)|(\"\"$)/g)) {\n                        body += \"<td>\".concat(JSON.parse(col), \"</td>\");\n                      } else {\n                        body += \"<td>\".concat(col, \"</td>\");\n                      }\n                    });\n                    body += \"</tr>\";\n                  }\n                }\n              }\n            });\n            body += \"</tbody>\";\n\n            if (header.length > 0 || body.length > 0) {\n              ea.hooks.doAction(\"ea.advDataTable.updateView\", view, true, {\n                ea_adv_data_table_static_html: header + body\n              });\n            }\n          }\n\n          textarea.value = \"\";\n        } else if (event.target.dataset.event == \"ea:advTable:connect\") {\n          var button = event.target;\n          button.innerHTML = \"Connecting\";\n          jQuery.ajax({\n            url: localize.ajaxurl,\n            type: \"post\",\n            data: {\n              action: \"connect_remote_db\",\n              security: localize.nonce,\n              host: model.attributes.settings.attributes.ea_adv_data_table_source_remote_host,\n              username: model.attributes.settings.attributes.ea_adv_data_table_source_remote_username,\n              password: model.attributes.settings.attributes.ea_adv_data_table_source_remote_password,\n              database: model.attributes.settings.attributes.ea_adv_data_table_source_remote_database\n            },\n            success: function success(response) {\n              if (response.connected == true) {\n                button.innerHTML = \"Connected\";\n                ea.hooks.doAction(\"ea.advDataTable.updateView\", view, true, {\n                  ea_adv_data_table_source_remote_connected: true,\n                  ea_adv_data_table_source_remote_tables: response.tables\n                }); // reload panel\n\n                panel.content.el.querySelector(\".elementor-section-title\").click();\n                panel.content.el.querySelector(\".elementor-section-title\").click();\n                var select = panel.el.querySelector('[data-setting=\"ea_adv_data_table_source_remote_table\"]');\n                select.length = 0;\n                response.tables.forEach(function (opt, index) {\n                  select[index] = new Option(opt, opt);\n                });\n              } else {\n                button.innerHTML = \"Failed\";\n              }\n            },\n            error: function error() {\n              button.innerHTML = \"Failed\";\n            }\n          });\n          setTimeout(function () {\n            button.innerHTML = \"Connect\";\n          }, 2000);\n        } else if (event.target.dataset.event == \"ea:advTable:disconnect\") {\n          ea.hooks.doAction(\"ea.advDataTable.updateView\", view, true, {\n            ea_adv_data_table_source_remote_connected: false,\n            ea_adv_data_table_source_remote_tables: []\n          }); // reload panel\n\n          panel.content.el.querySelector(\".elementor-section-title\").click();\n          panel.content.el.querySelector(\".elementor-section-title\").click();\n        }\n      });\n    }\n  }, {\n    key: \"initPanel\",\n    value: function initPanel(panel, model, view) {\n      var _this3 = this;\n\n      // init inline edit for first time\n      ea.hooks.doAction(\"ea.advDataTable.initInlineEdit\", model, view);\n      ea.hooks.doAction(\"ea.advDataTable.initPanelAction\", panel, model, view); // re init inline edit after render\n\n      model.on(\"remote:render\", function () {\n        _this3.inlineEditInitiated = false;\n        ea.hooks.doAction(\"ea.advDataTable.initInlineEdit\", model, view);\n      });\n    }\n  }, {\n    key: \"initFrontend\",\n    value: function initFrontend($scope, $) {\n      var table = $scope.context.querySelector(\".ea-advanced-data-table\");\n      var search = $scope.context.querySelector(\".ea-advanced-data-table-search\");\n      var pagination = $scope.context.querySelector(\".ea-advanced-data-table-pagination\");\n      var classCollection = {};\n\n      if (ea.isEditMode) {\n        table.querySelectorAll(\"th, td\").forEach(function (el) {\n          if (el.innerHTML.indexOf('<div class=\"inline-edit\">') !== 0) {\n            el.innerHTML = \"<div class=\\\"inline-edit\\\">\".concat(el.innerHTML, \"</div>\");\n          }\n        });\n      } else {\n        // search\n        this.initTableSearch(table, search, pagination); // sort\n\n        this.initTableSort(table, pagination, classCollection); // paginated table\n\n        this.initTablePagination(table, pagination, classCollection); // woocommerce\n\n        this.initWooFeatures(table);\n      }\n    }\n  }, {\n    key: \"initTableSearch\",\n    value: function initTableSearch(table, search, pagination) {\n      var _this4 = this;\n\n      if (search) {\n        search.addEventListener(\"input\", function (e) {\n          var input = _this4.value.toLowerCase();\n\n          var hasSort = table.classList.contains(\"ea-advanced-data-table-sortable\");\n          var offset = table.rows[0].parentNode.tagName.toLowerCase() == \"thead\" ? 1 : 0;\n\n          if (table.rows.length > 1) {\n            if (input.length > 0) {\n              if (hasSort) {\n                table.classList.add(\"ea-advanced-data-table-unsortable\");\n              }\n\n              if (pagination && pagination.innerHTML.length > 0) {\n                pagination.style.display = \"none\";\n              }\n\n              for (var i = offset; i < table.rows.length; i++) {\n                var matchFound = false;\n\n                if (table.rows[i].cells.length > 0) {\n                  for (var j = 0; j < table.rows[i].cells.length; j++) {\n                    if (table.rows[i].cells[j].textContent.toLowerCase().indexOf(input) > -1) {\n                      matchFound = true;\n                      break;\n                    }\n                  }\n                }\n\n                if (matchFound) {\n                  table.rows[i].style.display = \"table-row\";\n                } else {\n                  table.rows[i].style.display = \"none\";\n                }\n              }\n            } else {\n              if (hasSort) {\n                table.classList.remove(\"ea-advanced-data-table-unsortable\");\n              }\n\n              if (pagination && pagination.innerHTML.length > 0) {\n                pagination.style.display = \"\";\n                var currentPage = pagination.querySelector(\".ea-advanced-data-table-pagination-current\").dataset.page;\n                var startIndex = (currentPage - 1) * table.dataset.itemsPerPage + 1;\n                var endIndex = currentPage * table.dataset.itemsPerPage;\n\n                for (var _i = 1; _i <= table.rows.length - 1; _i++) {\n                  if (_i >= startIndex && _i <= endIndex) {\n                    table.rows[_i].style.display = \"table-row\";\n                  } else {\n                    table.rows[_i].style.display = \"none\";\n                  }\n                }\n              } else {\n                for (var _i2 = 1; _i2 <= table.rows.length - 1; _i2++) {\n                  table.rows[_i2].style.display = \"table-row\";\n                }\n              }\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"initTableSort\",\n    value: function initTableSort(table, pagination, classCollection) {\n      if (table.classList.contains(\"ea-advanced-data-table-sortable\")) {\n        table.addEventListener(\"click\", function (e) {\n          if (e.target.tagName.toLowerCase() === \"th\") {\n            var index = e.target.cellIndex;\n            var currentPage = 1;\n            var startIndex = 1;\n            var endIndex = table.rows.length - 1;\n            var sort = \"\";\n            var classList = e.target.classList;\n            var collection = [];\n            var origTable = table.cloneNode(true);\n\n            if (classList.contains(\"asc\")) {\n              e.target.classList.remove(\"asc\");\n              e.target.classList.add(\"desc\");\n              sort = \"desc\";\n            } else if (classList.contains(\"desc\")) {\n              e.target.classList.remove(\"desc\");\n              e.target.classList.add(\"asc\");\n              sort = \"asc\";\n            } else {\n              e.target.classList.add(\"asc\");\n              sort = \"asc\";\n            }\n\n            if (pagination && pagination.innerHTML.length > 0) {\n              currentPage = pagination.querySelector(\".ea-advanced-data-table-pagination-current\").dataset.page;\n              startIndex = (currentPage - 1) * table.dataset.itemsPerPage + 1;\n              endIndex = endIndex - (currentPage - 1) * table.dataset.itemsPerPage >= table.dataset.itemsPerPage ? currentPage * table.dataset.itemsPerPage : endIndex;\n            } // collect header class\n\n\n            classCollection[currentPage] = [];\n            table.querySelectorAll(\"th\").forEach(function (el) {\n              if (el.cellIndex != index) {\n                el.classList.remove(\"asc\", \"desc\");\n              }\n\n              classCollection[currentPage].push(el.classList.contains(\"asc\") ? \"asc\" : el.classList.contains(\"desc\") ? \"desc\" : \"\");\n            }); // collect table cells value\n\n            for (var i = startIndex; i <= endIndex; i++) {\n              var value = void 0;\n              var _cell = table.rows[i].cells[index];\n\n              if (isNaN(parseInt(_cell.innerText))) {\n                value = _cell.innerText.toLowerCase();\n              } else {\n                value = parseInt(_cell.innerText);\n              }\n\n              collection.push({\n                index: i,\n                value: value\n              });\n            } // sort collection array\n\n\n            if (sort == \"asc\") {\n              collection.sort(function (x, y) {\n                return x.value > y.value ? 1 : -1;\n              });\n            } else if (sort == \"desc\") {\n              collection.sort(function (x, y) {\n                return x.value < y.value ? 1 : -1;\n              });\n            } // sort table\n\n\n            collection.forEach(function (row, index) {\n              table.rows[startIndex + index].innerHTML = origTable.rows[row.index].innerHTML;\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"initTablePagination\",\n    value: function initTablePagination(table, pagination, classCollection) {\n      if (table.classList.contains(\"ea-advanced-data-table-paginated\")) {\n        var paginationHTML = \"\";\n        var paginationType = pagination.classList.contains(\"ea-advanced-data-table-pagination-button\") ? \"button\" : \"select\";\n        var currentPage = 1;\n        var startIndex = table.rows[0].parentNode.tagName.toLowerCase() == \"thead\" ? 1 : 0;\n        var endIndex = currentPage * table.dataset.itemsPerPage;\n        var maxPages = Math.ceil((table.rows.length - 1) / table.dataset.itemsPerPage); // insert pagination\n\n        if (maxPages > 1) {\n          if (paginationType == \"button\") {\n            for (var i = 1; i <= maxPages; i++) {\n              paginationHTML += \"<a href=\\\"#\\\" data-page=\\\"\".concat(i, \"\\\" class=\\\"\").concat(i == 1 ? \"ea-advanced-data-table-pagination-current\" : \"\", \"\\\">\").concat(i, \"</a>\");\n            }\n\n            pagination.insertAdjacentHTML(\"beforeend\", \"<a href=\\\"#\\\" data-page=\\\"1\\\">&laquo;</a>\".concat(paginationHTML, \"<a href=\\\"#\\\" data-page=\\\"\").concat(maxPages, \"\\\">&raquo;</a>\"));\n          } else {\n            for (var _i3 = 1; _i3 <= maxPages; _i3++) {\n              paginationHTML += \"<option value=\\\"\".concat(_i3, \"\\\">\").concat(_i3, \"</option>\");\n            }\n\n            pagination.insertAdjacentHTML(\"beforeend\", \"<select>\".concat(paginationHTML, \"</select>\"));\n          }\n        } // make initial item visible\n\n\n        for (var _i4 = 0; _i4 <= endIndex; _i4++) {\n          if (_i4 >= table.rows.length) {\n            break;\n          }\n\n          table.rows[_i4].style.display = \"table-row\";\n        } // paginate on click\n\n\n        if (paginationType == \"button\") {\n          pagination.addEventListener(\"click\", function (e) {\n            e.preventDefault();\n\n            if (e.target.tagName.toLowerCase() == \"a\") {\n              currentPage = e.target.dataset.page;\n              offset = table.rows[0].parentNode.tagName.toLowerCase() == \"thead\" ? 1 : 0;\n              startIndex = (currentPage - 1) * table.dataset.itemsPerPage + offset;\n              endIndex = currentPage * table.dataset.itemsPerPage;\n              pagination.querySelectorAll(\".ea-advanced-data-table-pagination-current\").forEach(function (el) {\n                el.classList.remove(\"ea-advanced-data-table-pagination-current\");\n              });\n              pagination.querySelectorAll(\"[data-page=\\\"\".concat(currentPage, \"\\\"]\")).forEach(function (el) {\n                el.classList.add(\"ea-advanced-data-table-pagination-current\");\n              });\n\n              for (var _i5 = offset; _i5 <= table.rows.length - 1; _i5++) {\n                if (_i5 >= startIndex && _i5 <= endIndex) {\n                  table.rows[_i5].style.display = \"table-row\";\n                } else {\n                  table.rows[_i5].style.display = \"none\";\n                }\n              }\n\n              table.querySelectorAll(\"th\").forEach(function (el, index) {\n                el.classList.remove(\"asc\", \"desc\");\n\n                if (typeof classCollection[currentPage] != \"undefined\") {\n                  if (classCollection[currentPage][index]) {\n                    el.classList.add(classCollection[currentPage][index]);\n                  }\n                }\n              });\n            }\n          });\n        } else {\n          if (pagination.hasChildNodes()) {\n            pagination.querySelector(\"select\").addEventListener(\"input\", function (e) {\n              e.preventDefault();\n              currentPage = e.target.value;\n              offset = table.rows[0].parentNode.tagName.toLowerCase() == \"thead\" ? 1 : 0;\n              startIndex = (currentPage - 1) * table.dataset.itemsPerPage + offset;\n              endIndex = currentPage * table.dataset.itemsPerPage;\n\n              for (var _i6 = offset; _i6 <= table.rows.length - 1; _i6++) {\n                if (_i6 >= startIndex && _i6 <= endIndex) {\n                  table.rows[_i6].style.display = \"table-row\";\n                } else {\n                  table.rows[_i6].style.display = \"none\";\n                }\n              }\n\n              table.querySelectorAll(\"th\").forEach(function (el, index) {\n                el.classList.remove(\"asc\", \"desc\");\n\n                if (typeof classCollection[currentPage] != \"undefined\") {\n                  if (classCollection[currentPage][index]) {\n                    el.classList.add(classCollection[currentPage][index]);\n                  }\n                }\n              });\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"initWooFeatures\",\n    value: function initWooFeatures(table) {\n      table.querySelectorAll(\".nt_button_woo\").forEach(function (el) {\n        el.classList.add(\"add_to_cart_button\", \"ajax_add_to_cart\");\n      });\n      table.querySelectorAll(\".nt_woo_quantity\").forEach(function (el) {\n        el.addEventListener(\"input\", function (e) {\n          var product_id = e.target.dataset.product_id;\n          var quantity = e.target.value;\n          $(\".nt_add_to_cart_\".concat(product_id), $(table)).data(\"quantity\", quantity);\n        });\n      });\n    }\n  }, {\n    key: \"initContextMenu\",\n    value: function initContextMenu(groups, element) {\n      if (element.options.model.attributes.widgetType == \"eael-advanced-data-table\" && element.options.model.attributes.settings.attributes.ea_adv_data_table_source == \"static\") {\n        groups.push({\n          name: \"ea_advanced_data_table\",\n          actions: [{\n            name: \"add_row_above\",\n            title: \"Add Row Above\",\n            callback: function callback() {\n              var table = document.querySelector(\".ea-advanced-data-table-\".concat(element.options.model.attributes.id));\n\n              if (this.activeCell !== null && this.activeCell.tagName.toLowerCase() != \"th\") {\n                var index = this.activeCell.parentNode.rowIndex;\n                var row = table.insertRow(index);\n\n                for (var i = 0; i < table.rows[0].cells.length; i++) {\n                  var _cell2 = row.insertCell(i);\n\n                  _cell2.classList.add(\"inline-edit\");\n                }\n\n                this.activeCell = null; // reinit tinymce\n\n                tinymce.init({\n                  selector: \".ea-advanced-data-table-editable th, .ea-advanced-data-table-editable td\",\n                  menubar: false,\n                  inline: true,\n                  plugins: [\"lists\", \"link\", \"autolink\"],\n                  toolbar: \"bold italic underline strikethrough link | alignleft aligncenter alignright | numlist bullist\",\n                  forced_root_block: false\n                }); // clone current table\n\n                var origTable = table.cloneNode(true); // remove editable area\n\n                origTable.querySelectorAll(\"th, td\").forEach(function (el) {\n                  el.removeAttribute(\"id\");\n                  el.removeAttribute(\"class\");\n                  el.removeAttribute(\"contenteditable\");\n                  el.removeAttribute(\"spellcheck\");\n                }); // update model\n\n                ea.hooks.doAction(\"ea.advDataTable.updateModel\", element.options.model, element.container, false, {\n                  ea_adv_data_table_static_html: origTable.innerHTML\n                });\n              }\n            }\n          }, {\n            name: \"add_row_below\",\n            title: \"Add Row Below\",\n            callback: function callback() {\n              var table = document.querySelector(\".ea-advanced-data-table-\".concat(element.options.model.attributes.id));\n\n              if (this.activeCell !== null) {\n                var index = this.activeCell.parentNode.rowIndex + 1;\n                var row = table.insertRow(index);\n\n                for (var i = 0; i < table.rows[0].cells.length; i++) {\n                  var _cell3 = row.insertCell(i);\n\n                  _cell3.classList.add(\"inline-edit\");\n                }\n\n                this.activeCell = null; // reinit tinymce\n\n                tinymce.init({\n                  selector: \".ea-advanced-data-table-editable th, .ea-advanced-data-table-editable td\",\n                  menubar: false,\n                  inline: true,\n                  plugins: [\"lists\", \"link\", \"autolink\"],\n                  toolbar: \"bold italic underline strikethrough link | alignleft aligncenter alignright | numlist bullist\",\n                  forced_root_block: false\n                }); // clone current table\n\n                var origTable = table.cloneNode(true); // remove editable area\n\n                origTable.querySelectorAll(\"th, td\").forEach(function (el) {\n                  el.removeAttribute(\"id\");\n                  el.removeAttribute(\"class\");\n                  el.removeAttribute(\"contenteditable\");\n                  el.removeAttribute(\"spellcheck\");\n                }); // update model\n\n                ea.hooks.doAction(\"ea.advDataTable.updateModel\", element.options.model, element.container, false, {\n                  ea_adv_data_table_static_html: origTable.innerHTML\n                });\n              }\n            }\n          }, {\n            name: \"add_column_left\",\n            title: \"Add Column Left\",\n            callback: function callback() {\n              var table = document.querySelector(\".ea-advanced-data-table-\".concat(element.options.model.attributes.id));\n\n              if (this.activeCell !== null) {\n                var index = this.activeCell.cellIndex;\n\n                for (var i = 0; i < table.rows.length; i++) {\n                  if (table.rows[i].cells[0].tagName.toLowerCase() == \"th\") {\n                    var _cell4 = table.rows[i].insertBefore(document.createElement(\"th\"), table.rows[i].cells[index]);\n                  } else {\n                    var _cell5 = table.rows[i].insertCell(index);\n                  }\n\n                  cell.classList.add(\"inline-edit\");\n                }\n\n                this.activeCell = null; // reinit tinymce\n\n                tinymce.init({\n                  selector: \".ea-advanced-data-table-editable th, .ea-advanced-data-table-editable td\",\n                  menubar: false,\n                  inline: true,\n                  plugins: [\"lists\", \"link\", \"autolink\"],\n                  toolbar: \"bold italic underline strikethrough link | alignleft aligncenter alignright | numlist bullist\",\n                  forced_root_block: false\n                }); // clone current table\n\n                var origTable = table.cloneNode(true); // remove editable area\n\n                origTable.querySelectorAll(\"th, td\").forEach(function (el) {\n                  el.removeAttribute(\"id\");\n                  el.removeAttribute(\"class\");\n                  el.removeAttribute(\"contenteditable\");\n                  el.removeAttribute(\"spellcheck\");\n                }); // update model\n\n                ea.hooks.doAction(\"ea.advDataTable.updateModel\", element.options.model, element.container, false, {\n                  ea_adv_data_table_static_html: origTable.innerHTML\n                });\n              }\n            }\n          }, {\n            name: \"add_column_right\",\n            title: \"Add Column Right\",\n            callback: function callback() {\n              var table = document.querySelector(\".ea-advanced-data-table-\".concat(element.options.model.attributes.id));\n\n              if (this.activeCell !== null) {\n                var index = this.activeCell.cellIndex + 1;\n\n                for (var i = 0; i < table.rows.length; i++) {\n                  if (table.rows[i].cells[0].tagName.toLowerCase() == \"th\") {\n                    var _cell6 = table.rows[i].insertBefore(document.createElement(\"th\"), table.rows[i].cells[index]);\n                  } else {\n                    var _cell7 = table.rows[i].insertCell(index);\n                  }\n\n                  cell.classList.add(\"inline-edit\");\n                }\n\n                this.activeCell = null; // reinit tinymce\n\n                tinymce.init({\n                  selector: \".ea-advanced-data-table-editable th, .ea-advanced-data-table-editable td\",\n                  menubar: false,\n                  inline: true,\n                  plugins: [\"lists\", \"link\", \"autolink\"],\n                  toolbar: \"bold italic underline strikethrough link | alignleft aligncenter alignright | numlist bullist\",\n                  forced_root_block: false\n                }); // clone current table\n\n                var origTable = table.cloneNode(true); // remove editable area\n\n                origTable.querySelectorAll(\"th, td\").forEach(function (el) {\n                  el.removeAttribute(\"id\");\n                  el.removeAttribute(\"class\");\n                  el.removeAttribute(\"contenteditable\");\n                  el.removeAttribute(\"spellcheck\");\n                }); // update model\n\n                ea.hooks.doAction(\"ea.advDataTable.updateModel\", element.options.model, element.container, false, {\n                  ea_adv_data_table_static_html: origTable.innerHTML\n                });\n              }\n            }\n          }, {\n            name: \"delete_row\",\n            title: \"Delete Row\",\n            callback: function callback() {\n              var table = document.querySelector(\".ea-advanced-data-table-\".concat(element.options.model.attributes.id));\n\n              if (this.activeCell !== null) {\n                var index = this.activeCell.parentNode.rowIndex;\n                table.deleteRow(index);\n                this.activeCell = null; // clone current table\n\n                var origTable = table.cloneNode(true); // remove editable area\n\n                origTable.querySelectorAll(\"th, td\").forEach(function (el) {\n                  el.removeAttribute(\"id\");\n                  el.removeAttribute(\"class\");\n                  el.removeAttribute(\"contenteditable\");\n                  el.removeAttribute(\"spellcheck\");\n                }); // update model\n\n                ea.hooks.doAction(\"ea.advDataTable.updateModel\", element.options.model, element.container, false, {\n                  ea_adv_data_table_static_html: origTable.innerHTML\n                });\n              }\n            }\n          }, {\n            name: \"delete_column\",\n            title: \"Delete Column\",\n            callback: function callback() {\n              var table = document.querySelector(\".ea-advanced-data-table-\".concat(element.options.model.attributes.id));\n\n              if (this.activeCell !== null) {\n                var index = this.activeCell.cellIndex;\n\n                for (var i = 0; i < table.rows.length; i++) {\n                  table.rows[i].deleteCell(index);\n                }\n\n                this.activeCell = null; // clone current table\n\n                var origTable = table.cloneNode(true); // remove editable area\n\n                origTable.querySelectorAll(\"th, td\").forEach(function (el) {\n                  el.removeAttribute(\"id\");\n                  el.removeAttribute(\"class\");\n                  el.removeAttribute(\"contenteditable\");\n                  el.removeAttribute(\"spellcheck\");\n                }); // update model\n\n                ea.hooks.doAction(\"ea.advDataTable.updateModel\", element.options.model, element.container, false, {\n                  ea_adv_data_table_static_html: origTable.innerHTML\n                });\n              }\n            }\n          }]\n        });\n      }\n\n      return groups;\n    }\n  }]);\n\n  return advancedDataTable;\n}();\n\nea.hooks.addAction(\"ea.frontend.init\", \"ea\", function () {\n  new advancedDataTable();\n});\n\n//# sourceURL=webpack:///./src/advancedDataTable.js?");

/***/ })

/******/ });